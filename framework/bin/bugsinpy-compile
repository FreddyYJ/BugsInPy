#!/bin/bash
usage="-w work_dir
             The working directory to compile the project. Default will be the current directory.
"

case $1 in
 -[h?] | --help)
    cat <<-____HALP
        Usage: ${0##*/} [ --help ]
        $usage
____HALP
        exit 0;;
esac

###Read the flag of checkout
while getopts p:i:v:w: flag
do
    case "${flag}" in
        w) work_dir=${OPTARG};;
    esac
done

###Update the work directory
if [ "$work_dir" == "" ]; then 
   work_dir=$(pwd)
fi

if [[ $work_dir == */ ]]; then 
   temp_work_dir="$work_dir"
   work_dir=${temp_work_dir::-1}
fi

###Check work directory 
if [[ ! -e "$work_dir/bugsinpy_bug.info" ]]; then
   echo "This is not a checkout project folder"
   exit
elif [[ ! -e "$work_dir/bugsinpy_requirements.txt" ]]; then
   echo "This is not a checkout project folder"
   exit
elif [[ ! -e "$work_dir/bugsinpy_run_test.sh" ]]; then
   echo "This is not a checkout project folder"
   exit
fi

###Check dos2unix
#check_dos2unix=$(dos2unix --version 2>&1)
#if [ "$check_dos2unix" == *"not found"* ]; then
#   echo "Please install dos2unix (sudo apt-get dos2unix)"
#   exit
#fi

###Remove environment if exist
rm -r -f env/

###Add environment
python -m venv env

###Activate environment
if [ -d "env/Scripts" ]; then
  act=env/Scripts/activate
  source env/Scripts/activate
else
  check_dos2unix=$(dos2unix --version 2>&1)
	if [ "$check_dos2unix" == *"not found"* ]; then
	   echo "Please install dos2unix (sudo apt-get dos2unix)"
	   exit
	fi
  act=env/bin/activate
  source env/bin/activate
  dos2unix $work_dir/bugsinpy_requirements.txt
fi
###Add pythonpath
pythonpath_set=""
pythonpath_without_folder=""
buggy_commit=""
fix_commit=""

pip install --upgrade pip
pip install /root/project/RuntimeAPR
pip install --upgrade typing-extensions

###Read bug.info file
DONE=false
until $DONE ;do
read || DONE=true
if [[ "$REPLY" == "buggy_commit_id"* ]]; then
   buggy_commit="$(cut -d'"' -f 2 <<< $REPLY)"
elif [[ "$REPLY" == "fixed_commit_id"* ]]; then
   fix_commit="$(cut -d'"' -f 2 <<< $REPLY)"
elif [[ "$REPLY" == "test_file"* ]]; then
   test_file_all="$(cut -d'"' -f 2 <<< $REPLY)"
   IFS=';' read -r -a test_file <<< "$test_file_all"
elif [[ "$REPLY" == "pythonpath"* ]]; then
   pythonpath_all="$(cut -d'"' -f 2 <<< $REPLY)"
   if [ "$pythonpath_all" != "" ]; then
       if [[ $work_dir != /* ]]; then
           work_dir_py=${work_dir:1}
           temp_folder=":${work_dir_py}/"
       else
           temp_folder=":${work_dir}/"
       fi
       check_py="$(cut -d';' -f 1 <<< $pythonpath_all; )"
       string2="$(cut -d'/' -f 1 <<< $check_py/ )"
       temp_change_py=";$pythonpath_all"
       deli=";$string2"
       pythonpath_set=${temp_change_py//$deli/$temp_folder}
       pythonpath_set="${pythonpath_set:1}"
       pythonpath_set=$(echo "$pythonpath_set" | sed s#//*#/#g)
   fi
fi
done < "$work_dir/bugsinpy_bug.info"

###Fix pandas error
if [[ "$work_dir" == *"pandas"* ]]; then
   sed -i 's|\["-Werror"\]|\[\]|g' $work_dir/setup.py
fi

###Read setup.sh
  run_setup_all=""
  if [[ -f "$work_dir/bugsinpy_setup.sh" ]]; then
    DONE=false
    until $DONE ;do
    read || DONE=true
       run_setup_all+="$REPLY;"
       echo $REPLY
    done < "$work_dir/bugsinpy_setup.sh"
  fi
  
  IFS=';' read -r -a run_setup <<< "$run_setup_all"

###Run setup.sh
#dos2unix $work_dir/bugsinpy_requirements.txt
#pip install -r "$work_dir/bugsinpy_requirements.txt"
if grep -q '[^[:space:]]' "$work_dir/bugsinpy_requirements.txt"; then
    cat "$work_dir/bugsinpy_requirements.txt" | sed -e '/^\s*#.*$/d' -e '/^\s*$/d' | xargs -n 1 pip install
fi

for index in "${!run_setup[@]}"
do
   run_setup_trail=${run_setup[index]} 
   run_setup_now=$(echo $run_setup_trail | sed -e 's/\r//g')
   $run_setup_now
done
  
###Install requirement
#pip install -r "$work_dir/bugsinpy_requirements.txt"
if grep -q '[^[:space:]]' "$work_dir/bugsinpy_requirements.txt"; then
    cat "$work_dir/bugsinpy_requirements.txt" | sed -e '/^\s*#.*$/d' -e '/^\s*$/d' | xargs -n 1 pip install
fi
deactivate


###Add pythonpath to activate if matplotlib
if [[ "$work_dir" == *"matplotlib"* ]]; then
   if [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
      delim="$"
      pp="PYTHONPATH"
      if [ -d "env/Scripts" ]; then
         echo "PYTHONPATH=$work_dir/env/lib/python3.8/site-packages/:$delim$pp" >> "$work_dir/env/Scripts/activate"
         echo "export PYTHONPATH" >> "$work_dir/env/Scripts/activate"
      else
         echo "PYTHONPATH=$work_dir/env/lib/python3.8/site-packages/:$delim$pp" >> "$work_dir/env/bin/activate"
         echo "export PYTHONPATH" >> "$work_dir/env/bin/activate"
      fi
   fi
fi

if [[ "$work_dir" == *"ansible"* ]]; then
   if [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
      delim="$"
      pp="PYTHONPATH"
      if [ -d "env/Scripts" ]; then
         echo "PYTHONPATH=$work_dir/lib:$delim$pp" >> "$work_dir/env/Scripts/activate"
         echo "export PYTHONPATH" >> "$work_dir/env/Scripts/activate"
      else
         echo "PYTHONPATH=$work_dir/lib:$delim$pp" >> "$work_dir/env/bin/activate"
         echo "export PYTHONPATH" >> "$work_dir/env/bin/activate"
      fi
   fi
fi


###Add compile flag
echo "1" > "$work_dir/bugsinpy_compile_flag"
